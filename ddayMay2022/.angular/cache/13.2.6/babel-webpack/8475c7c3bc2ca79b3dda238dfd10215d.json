{"ast":null,"code":"import _asyncToGenerator from \"/Users/clew/Desktop/newDDayApps/ddayMay2022/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n\n        resolve(base64StringWithoutTags);\n      };\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsDataURL(blob);\n    });\n  });\n\n  return function readBlobAsBase64(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\n\nexport const encode = str => encodeURIComponent(str).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\n\nexport const decode = str => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);","map":{"version":3,"sources":["/Users/clew/Desktop/newDDayApps/ddayMay2022/node_modules/@capacitor-community/http/dist/esm/utils.js"],"names":["readBlobAsBase64","blob","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","substr","indexOf","onerror","error","readAsDataURL","encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB;AAAA,+BAAG,WAAOC,IAAP;AAAA,WAAgB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7E,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AAClB,cAAMC,YAAY,GAAGH,MAAM,CAACI,MAA5B;AACA,cAAMC,uBAAuB,GAAGF,YAAY,CAACG,MAAb,CAAoBH,YAAY,CAACI,OAAb,CAAqB,GAArB,IAA4B,CAAhD,CAAhC,CAFkB,CAEkE;;AACpFT,QAAAA,OAAO,CAACO,uBAAD,CAAP;AACH,OAJD;;AAKAL,MAAAA,MAAM,CAACQ,OAAP,GAAkBC,KAAD,IAAWV,MAAM,CAACU,KAAD,CAAlC;;AACAT,MAAAA,MAAM,CAACU,aAAP,CAAqBd,IAArB;AACH,KAT+C,CAAhB;AAAA,GAAH;;AAAA,kBAAhBD,gBAAgB;AAAA;AAAA;AAAA,GAAtB;AAUP;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,MAAM,GAAIC,GAAD,IAASC,kBAAkB,CAACD,GAAD,CAAlB,CAC1BE,OAD0B,CAClB,sBADkB,EACMC,kBADN,EAE1BD,OAF0B,CAElB,OAFkB,EAETE,MAFS,CAAxB;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAIL,GAAD,IAASA,GAAG,CAACE,OAAJ,CAAY,kBAAZ,EAAgCC,kBAAhC,CAAxB","sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n"]},"metadata":{},"sourceType":"module"}